datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  UserProject   UserProject[]
  Project       Project[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id        String      @id @default(cuid())
  name      String
  ownerId   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  ApiSchema ApiSchema[]
  ApiKey    ApiKey?

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@index([ownerId])
}

model Versions {
  id          String @id @default(cuid())
  projectId   String
  schemaId    String
  description String

  schema ApiSchema @relation(fields: [schemaId], references: [id], onDelete: Cascade)

  @@index([schemaId])
}

model UserProject {
  id        String @id @default(cuid())
  projectId String
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model ApiKey {
  id        String @id @default(cuid())
  projectId String @unique
  key       String @unique @default(cuid())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model ApiSchema {
  id        String @id @default(cuid())
  projectId String
  schema    Json

  project  Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Versions Versions[]

  @@index([projectId])
}
